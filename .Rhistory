}
colnames(curr.df)[m] <- colnames(mtx)[m]
}
perc.ls[[count]] <- list(curr.cell, curr.df)
count <- count + 1
}
return(perc.ls)
}
binarization <- function(mtx, perc.ls, multi.threshold = 0.05) {
bin.class.ct <- mtx
for (i in 1:length(perc.ls)) {
curr.cell <- perc.ls[[i]][[1]]
curr.perc.df <- perc.ls[[i]][[2]]
bin.class.ct[curr.cell, ] <- 0
cmeans <- colMeans(curr.perc.df)
if (sum(cmeans == 1) == ncol(curr.perc.df)) {
bin.class.ct[curr.cell, ] <- 0
} else {
min.col.num <- apply(curr.perc.df, 1, function(x) which(x == min(x))[1])
col.n.uniq <- unique(min.col.num)
min.col.freq <- as.data.frame(table(min.col.num))
min.col.freq$perc <- min.col.freq$Freq/50
min.col.freq$min.col.num <- as.integer(as.character(min.col.freq$min.col.num))
if (nrow(min.col.freq) > 1){
idx <- which(min.col.freq$perc >= 0.8)
if (length(idx) > 0) {
col.n.uniq <- min.col.freq$min.col.num[idx]
}
}
if (length(col.n.uniq) == 1) {
min.col <- curr.perc.df[, col.n.uniq]
other.perc.col <- as.data.frame(curr.perc.df[,-col.n.uniq])
colnames(other.perc.col) <- colnames(curr.perc.df)[-col.n.uniq]
new.cmeans <- colMeans(other.perc.col)
if (length(which(new.cmeans == 1)) < ncol(other.perc.col)) {
if (length(which(new.cmeans == 1)) > 0) {
other.perc.col <- other.perc.col[,-which(new.cmeans == 1)]
}
other.perc.fold <- abs(min.col - other.perc.col)
appx.one.rate <- apply(as.data.frame(other.perc.fold), 2, median)
multi.col <- names(appx.one.rate[which(appx.one.rate <= multi.threshold)])
if (length(multi.col) >= 1) {
bin.class.ct[curr.cell, multi.col] <- 1
}
}
}
bin.class.ct[curr.cell, col.n.uniq] <- 1
}
}
# check NAs
na.col <- apply(bin.class.ct, 2, function(x) any(is.na(x)))
if (any(na.col)) {
return(bin.class.ct[,-which(na.col)])
} else {
return(bin.class.ct)
}
}
binary.to.classification <- function(bin.count.rslt) {
class.rslt <- data.frame()
bin.count.rsums <- rowSums(bin.count.rslt)
for (i in 1:nrow(bin.count.rslt)) {
curr.cell.bc <- rownames(bin.count.rslt)[i]
if (bin.count.rsums[i] > 1) {
curr.df <- data.frame(barcode = curr.cell.bc, call = "Multi_ID", stringsAsFactors = F)
} else {
idx <- which(bin.count.rslt[i,] == 1)
identity <- strsplit(colnames(bin.count.rslt)[idx], "_")[[1]]
curr.df <- data.frame(barcode = curr.cell.bc, call = identity[length(identity)], stringsAsFactors = F)
}
if (nrow(class.rslt) <= 0) {
class.rslt <- curr.df
} else {
class.rslt <- rbind(class.rslt, curr.df)
}
}
return(class.rslt)
}
tm.data.meta.smart.seq <- read.csv("~/Desktop/Morris Lab/Classifier Analysis/Reference datasets/Tabula Muris/sc facs smartseq v2/annotations_FACS.csv",
row.names = 1, header = T, stringsAsFactors = F)
tm.tissue.meta <- data.frame(row.names = rownames(tm.data.meta.smart.seq),
tissue = tm.data.meta.smart.seq[rownames(tm.data.meta.smart.seq), "tissue"],
cell.type = tm.data.meta.smart.seq[rownames(tm.data.meta.smart.seq), "cell_ontology_class"],
stringsAsFactors = F)
tm.tissue.meta.known <- tm.tissue.meta[which(tm.tissue.meta$cell.type != "unknown"), ]
general.path <- "~/Desktop/Morris Lab/Classifier Analysis/Reference datasets/Tabula Muris/facs smartseq v2 rslt/"
file.ls <- list.files("~/Desktop/Morris Lab/Classifier Analysis/Reference datasets/Tabula Muris/sc facs smartseq v2/FACS",
full.names = T)
base.nms <- basename(file.ls)
tissue.parts.filename <- unlist(lapply(strsplit(base.nms, "-"), function(x) x[1]))
sample.parts <- unlist(lapply(strsplit(base.nms, "-"), function(x) x[2]))
unq.tissue <- unique(tissue.parts.filename)
base.nms
file.ls <- list.files("~/Desktop/Morris Lab/Classifier Analysis/Reference datasets/Tabula Muris/sc facs smartseq v2/FACS",
full.names = T)
base.nms <- basename(file.ls)
#tissue.parts.filename <- unlist(lapply(strsplit(base.nms, "-"), function(x) x[1]))
#sample.parts <- unlist(lapply(strsplit(base.nms, "-"), function(x) x[2]))
unq.tissue <- unique(tissue.parts.filename)
tissue.parts.filename <- unlist(lapply(strsplit(base.nms, "-"), function(x) x[1]))
tissue.parts.filename <- unlist(lapply(strsplit(base.nms, "-"), function(x) x[1]))
#sample.parts <- unlist(lapply(strsplit(base.nms, "-"), function(x) x[2]))
unq.tissue <- unique(tissue.parts.filename)
unq.tissue
for (k in 1:length(unq.tissue)) {
curr.tissue <- unq.tissue[k]
file.base.name <- base.nms[which(startsWith(base.nms, curr.tissue))]
file.full <- file.ls[which(startsWith(base.nms, curr.tissue))]
sample.subset <- sample.parts[which(startsWith(base.nms, curr.tissue))]
print(curr.tissue)
# dir.create(paste0(general.path, curr.tissue))
file.saving.dir <- paste0(general.path, curr.tissue)
sc.data <- read.csv(file.ls[k], header = T, row.names = 1, stringsAsFactors = F)
# sc.data <- data.frame()
# for (a in 1:length(file.full)) {
#   curr.mtx <- Seurat:::Read10X(file.full[a])
#   colnames(curr.mtx) <- paste0(sample.subset[a], "_", colnames(curr.mtx))
#   curr.mtx <- as.matrix(curr.mtx[, intersect(colnames(curr.mtx), rownames(tm.tissue.meta.known))])
#
#   if (nrow(sc.data) <= 0) {
#     sc.data <- curr.mtx
#   } else {
#     sc.data <- cbind(sc.data, curr.mtx)
#   }
# }
meta.subset <- tm.tissue.meta.known[intersect(rownames(tm.tissue.meta.known), colnames(sc.data)), ]
meta.subset$concat <- paste0(meta.subset$tissue, ".", gsub(" ", ".", meta.subset$cell.type))
# meta.subset$concat <- meta.subset$cell.type
sc.data.filtered <- sc.data[,intersect(rownames(tm.tissue.meta.known), colnames(sc.data))]
##########################
# Generating some stats
cs.ori <- colSums(sc.data)
ori.m <- mean(cs.ori)
ori.std <- sqrt(var(cs.ori))
ori.q <- quantile(cs.ori, c(0.25, 0.5, 0.75))
cs.filter <- colSums(sc.data.filtered)
f.m <- mean(cs.filter)
f.std <- sqrt(var(cs.filter))
f.q <- quantile(cs.filter, c(0.25, 0.5, 0.75))
stats.df <- data.frame(original = c(ori.m, ori.std, ori.q),
filtered = c(f.m, f.std, f.q),
row.names = c("mean", "standard.deviation", "twenty.fifth", "median", "seventy.fifth"))
# write.csv(stats.df, paste0(file.saving.dir, "/stats.csv"), quote = F)
##########################
freq.table <- as.data.frame(table(meta.subset$concat))
freq.table$Var1 <- as.character(freq.table$Var1)
# write.csv(freq.table, paste0(file.saving.dir, "/freq.csv"), row.names = F, quote = F)
cell.num.for.use <- 90
full.ref.cell.samp <- c()
ref.aux.meta <- data.frame()
few.sample.sample <- c()
for (j in 1:nrow(freq.table)) {
curr.cell.type <- freq.table$Var1[j]
cell.bc <- rownames(meta.subset)[which(meta.subset$concat == curr.cell.type)]
if (length(cell.bc) >= cell.num.for.use) {
curr.bc.sample <- sample(cell.bc, cell.num.for.use, replace = F)
curr.bc.sample.mod <- curr.bc.sample
} else {
curr.bc.sample <- sample(cell.bc, cell.num.for.use, replace = T)
curr.bc.sample.mod <- paste0(seq(1,cell.num.for.use), "_", curr.bc.sample)
few.sample.sample <- c(few.sample.sample, as.character(curr.cell.type))
}
full.ref.cell.samp <- c(full.ref.cell.samp, curr.bc.sample)
curr.aux.meta <- data.frame(row.names = curr.bc.sample.mod, cell.type = meta.subset[curr.bc.sample, "concat"], stringsAsFactors = F)
if (nrow(ref.aux.meta) <= 0) {
ref.aux.meta <- curr.aux.meta
} else {
ref.aux.meta <- rbind(ref.aux.meta, curr.aux.meta)
}
}
remaining.sample <- setdiff(rownames(meta.subset), full.ref.cell.samp)
sc.mat.ref <- t(sc.data[, full.ref.cell.samp])
sc.ref.meta <- meta.subset[full.ref.cell.samp, ]
for (i in 1:length(few.sample.sample)) {
curr.rnm <- rownames(sc.mat.ref)[which(sc.ref.meta$concat == few.sample.sample[i])]
rownames(sc.mat.ref)[which(sc.ref.meta$concat == few.sample.sample[i])] <- paste0(seq(1, cell.num.for.use), "_", curr.rnm)
}
ref.mat <- ref.construction(t(sc.mat.ref), ref.aux.meta, "cell.type")
sc.mat <- sc.data.filtered
corr.ref <- cor(ref.mat)
rownames(corr.ref) <- unlist(lapply(strsplit(rownames(corr.ref), "_"), function(x) x[2]))
colnames(corr.ref) <- unlist(lapply(strsplit(colnames(corr.ref), "_"), function(x) x[2]))
pdf(paste0(file.saving.dir, "/reference_correlation_plot.pdf"), width = 5, height = 5, paper = "special")
corrplot(corr.ref, method = "square")
dev.off()
}
for (k in 1:length(unq.tissue)) {
curr.tissue <- unq.tissue[k]
file.base.name <- base.nms[which(startsWith(base.nms, curr.tissue))]
file.full <- file.ls[which(startsWith(base.nms, curr.tissue))]
sample.subset <- sample.parts[which(startsWith(base.nms, curr.tissue))]
print(curr.tissue)
# dir.create(paste0(general.path, curr.tissue))
file.saving.dir <- paste0(general.path, curr.tissue)
sc.data <- read.csv(file.ls[k], header = T, row.names = 1, stringsAsFactors = F)
# sc.data <- data.frame()
# for (a in 1:length(file.full)) {
#   curr.mtx <- Seurat:::Read10X(file.full[a])
#   colnames(curr.mtx) <- paste0(sample.subset[a], "_", colnames(curr.mtx))
#   curr.mtx <- as.matrix(curr.mtx[, intersect(colnames(curr.mtx), rownames(tm.tissue.meta.known))])
#
#   if (nrow(sc.data) <= 0) {
#     sc.data <- curr.mtx
#   } else {
#     sc.data <- cbind(sc.data, curr.mtx)
#   }
# }
meta.subset <- tm.tissue.meta.known[intersect(rownames(tm.tissue.meta.known), colnames(sc.data)), ]
meta.subset$concat <- paste0(meta.subset$tissue, ".", gsub(" ", ".", meta.subset$cell.type))
# meta.subset$concat <- meta.subset$cell.type
sc.data.filtered <- sc.data[,intersect(rownames(tm.tissue.meta.known), colnames(sc.data))]
##########################
# Generating some stats
cs.ori <- colSums(sc.data)
ori.m <- mean(cs.ori)
ori.std <- sqrt(var(cs.ori))
ori.q <- quantile(cs.ori, c(0.25, 0.5, 0.75))
cs.filter <- colSums(sc.data.filtered)
f.m <- mean(cs.filter)
f.std <- sqrt(var(cs.filter))
f.q <- quantile(cs.filter, c(0.25, 0.5, 0.75))
stats.df <- data.frame(original = c(ori.m, ori.std, ori.q),
filtered = c(f.m, f.std, f.q),
row.names = c("mean", "standard.deviation", "twenty.fifth", "median", "seventy.fifth"))
# write.csv(stats.df, paste0(file.saving.dir, "/stats.csv"), quote = F)
##########################
freq.table <- as.data.frame(table(meta.subset$concat))
freq.table$Var1 <- as.character(freq.table$Var1)
# write.csv(freq.table, paste0(file.saving.dir, "/freq.csv"), row.names = F, quote = F)
cell.num.for.use <- 90
full.ref.cell.samp <- c()
ref.aux.meta <- data.frame()
few.sample.sample <- c()
for (j in 1:nrow(freq.table)) {
curr.cell.type <- freq.table$Var1[j]
cell.bc <- rownames(meta.subset)[which(meta.subset$concat == curr.cell.type)]
if (length(cell.bc) >= cell.num.for.use) {
curr.bc.sample <- sample(cell.bc, cell.num.for.use, replace = F)
curr.bc.sample.mod <- curr.bc.sample
} else {
curr.bc.sample <- sample(cell.bc, cell.num.for.use, replace = T)
curr.bc.sample.mod <- paste0(seq(1,cell.num.for.use), "_", curr.bc.sample)
few.sample.sample <- c(few.sample.sample, as.character(curr.cell.type))
}
full.ref.cell.samp <- c(full.ref.cell.samp, curr.bc.sample)
curr.aux.meta <- data.frame(row.names = curr.bc.sample.mod, cell.type = meta.subset[curr.bc.sample, "concat"], stringsAsFactors = F)
if (nrow(ref.aux.meta) <= 0) {
ref.aux.meta <- curr.aux.meta
} else {
ref.aux.meta <- rbind(ref.aux.meta, curr.aux.meta)
}
}
remaining.sample <- setdiff(rownames(meta.subset), full.ref.cell.samp)
sc.mat.ref <- t(sc.data[, full.ref.cell.samp])
sc.ref.meta <- meta.subset[full.ref.cell.samp, ]
for (i in 1:length(few.sample.sample)) {
curr.rnm <- rownames(sc.mat.ref)[which(sc.ref.meta$concat == few.sample.sample[i])]
rownames(sc.mat.ref)[which(sc.ref.meta$concat == few.sample.sample[i])] <- paste0(seq(1, cell.num.for.use), "_", curr.rnm)
}
ref.mat <- ref.construction(t(sc.mat.ref), ref.aux.meta, "cell.type")
sc.mat <- sc.data.filtered
corr.ref <- cor(ref.mat)
# rownames(corr.ref) <- unlist(lapply(strsplit(rownames(corr.ref), "_"), function(x) x[2]))
# colnames(corr.ref) <- unlist(lapply(strsplit(colnames(corr.ref), "_"), function(x) x[2]))
pdf(paste0(file.saving.dir, "/reference_correlation_plot.pdf"), width = 5, height = 5, paper = "special")
corrplot(corr.ref, method = "square")
dev.off()
}
source("~/Desktop/Morris Lab/Classifier Analysis/Reference datasets/Code/scClassifier source.R")
tm.data.meta.smart.seq <- read.csv("~/Desktop/Morris Lab/Classifier Analysis/Reference datasets/Tabula Muris/sc facs smartseq v2/annotations_FACS.csv",
row.names = 1, header = T, stringsAsFactors = F)
tm.tissue.meta <- data.frame(row.names = rownames(tm.data.meta.smart.seq),
tissue = tm.data.meta.smart.seq[rownames(tm.data.meta.smart.seq), "tissue"],
cell.type = tm.data.meta.smart.seq[rownames(tm.data.meta.smart.seq), "cell_ontology_class"],
stringsAsFactors = F)
tm.tissue.meta.known <- tm.tissue.meta[which(tm.tissue.meta$cell.type != "unknown"), ]
pancreas <- tm.tissue.meta.known[which(tm.tissue.meta.known$tissue == "Pancreas"), ]
View(pancreas)
pancreas.sc <- read.csv("~/Desktop/Morris Lab/Classifier Analysis/Reference datasets/Tabula Muris/sc facs smartseq v2/FACS/Pancreas-counts.csv", header = T, row.names = 1, stringsAsFactors = F)
meta.subset <- tm.tissue.meta.known[intersect(rownames(tm.tissue.meta.known), colnames(pancreas.sc)), ]
mca.pancreas.sc <- read.csv("~/Desktop/Morris Lab/Classifier Analysis/Reference datasets/MCA/MCA_Counts/Pancreas/count.csv",
row.names = 1, header = T, stringsAsFactors = F)
mca <- read.csv("~/Desktop/Morris Lab/Classifier Analysis/Reference datasets/MCA/MCA_CellAssignments.csv",
row.names = 1, header = T, stringsAsFactors = F)
mca.meta <- data.frame(row.names = mca$Cell.name,
tissue = mca$Tissue,
cell.type = mca$Annotation,
stringsAsFactors = F)
mca.meta.pancreas <- mca.meta[colnames(mca.pancreas.sc), ]
freq.table.pancrs <- as.data.frame(table(meta.subset$cell.type))
freq.table.pancrs$Var1 <- as.character(freq.table.pancrs$Var1)
freq.table.mca <- as.data.frame(table(mca.meta.pancreas$cell.type))
freq.table.mca$Var1 <- as.character(freq.table.mca$Var1)
View(freq.table.mca)
View(freq.table.pancrs)
cell.num.for.use <- 90
View(mca.meta)
full.ref.cell.samp <- c()
ref.aux.meta <- data.frame()
few.sample.sample <- c()
for (j in 1:nrow(freq.table.mca)) {
curr.cell.type <- freq.table.mca$Var1[j]
cell.bc <- rownames(mca.meta.pancreas)[which(mca.meta.pancreas$cell.type == curr.cell.type)]
if (length(cell.bc) >= cell.num.for.use) {
curr.bc.sample <- sample(cell.bc, cell.num.for.use, replace = F)
curr.bc.sample.mod <- curr.bc.sample
} else {
curr.bc.sample <- sample(cell.bc, cell.num.for.use, replace = T)
curr.bc.sample.mod <- paste0(seq(1,cell.num.for.use), "_", curr.bc.sample)
few.sample.sample <- c(few.sample.sample, as.character(curr.cell.type))
}
full.ref.cell.samp <- c(full.ref.cell.samp, curr.bc.sample)
curr.aux.meta <- data.frame(row.names = curr.bc.sample.mod, cell.type = mca.meta.pancreas[curr.bc.sample, "cell.type"], stringsAsFactors = F)
if (nrow(ref.aux.meta) <= 0) {
ref.aux.meta <- curr.aux.meta
} else {
ref.aux.meta <- rbind(ref.aux.meta, curr.aux.meta)
}
}
View(ref.aux.meta)
remaining.sample <- setdiff(rownames(mca.meta.pancreas), full.ref.cell.samp)
colnames(mca.pancreas.sc)
sc.mat.ref <- t(mca.pancreas.sc[, full.ref.cell.samp])
sc.ref.meta <- mca.meta.pancreas[full.ref.cell.samp, ]
for (i in 1:length(few.sample.sample)) {
curr.rnm <- rownames(sc.mat.ref)[which(sc.ref.meta$concat == few.sample.sample[i])]
rownames(sc.mat.ref)[which(sc.ref.meta$concat == few.sample.sample[i])] <- paste0(seq(1, cell.num.for.use), "_", curr.rnm)
}
ref.mat <- ref.construction(t(sc.mat.ref), ref.aux.meta, "cell.type")
View(ref.mat)
sc.mat <- pancreas.sc
colnames(sc.mat)
sc.mat <- pancreas.sc
curr.tissue <- "pancreas"
file.saving.dir <- "~/Desktop/Morris Lab/Classifier Analysis/Cross Reference Analysis"
single.round.QP.analysis(ref.mat, t(sc.mat.ref), save.to.path = paste0(file.saving.dir, "/"),
save.to.filename = paste0("MCA_", cell.num.for.use, "_cells_for_ref_for_density_ref_", curr.tissue))
single.round.QP.analysis(ref.mat, sc.mat, save.to.path = paste0(file.saving.dir, "/"),
save.to.filename = paste0("MCA_", cell.num.for.use, "_cells_for_ref_for_TM_", curr.tissue))
col1 <- viridis(20)
my.df <- mca.meta.pancreas
View(my.df)
my.df$rn <- rownames(my.df)
file.path.name.ref <- paste0(file.saving.dir, "/MCA_", cell.num.for.use, "_cells_for_ref_for_density_ref_", curr.tissue, "_scale.csv")
file.path.name <- paste0(file.saving.dir, "/MCA_", cell.num.for.use, "_cells_for_ref_for_TM_", curr.tissue, "_scale.csv")
col1 <- viridis(20)
my.df <- mca.meta.pancreas
my.df$rn <- rownames(my.df)
background.mtx <- read.csv(file.path.name.ref, header = T, row.names = 1, stringsAsFactors = F)
mtx.test <- read.csv(file.path.name, header = T, row.names = 1, stringsAsFactors = F)
col.sub <- ncol(background.mtx) - 2
perc.list <- percentage.calc(as.matrix(mtx.test[,c(1:col.sub)]), as.matrix(background.mtx[,c(1:col.sub)]))
thresholds <- seq(0.0005, 0.015, by = 0.0005)
classify.rslt <- list()
for (i in 1:length(thresholds)) {
print(i)
bin.count <- binarization(mtx.test[,c(1:col.sub)], perc.ls = perc.list, multi.threshold = thresholds[i])
classify.rslt[[i]] <- bin.count
p <- paste0(file.saving.dir, "/")
fn <- "MCA_TM"
write.csv(bin.count, paste0(p, fn, "_", thresholds[i],"_binary_threshold_", curr.tissue, ".csv"), quote = F, row.names = T)
}
i <- 1
curr.class <- classify.rslt[[i]]
rownames(curr.class)
my.df.sub <- meta.subset[rownames(curr.class),]
View(my.df.sub)
View(meta.subset)
pancreas.sc <- pancreas.sc[rownames(meta.subset), ]
View(pancreas.sc)
pancreas.sc <- read.csv("~/Desktop/Morris Lab/Classifier Analysis/Reference datasets/Tabula Muris/sc facs smartseq v2/FACS/Pancreas-counts.csv", header = T, row.names = 1, stringsAsFactors = F)
meta.subset <- tm.tissue.meta.known[intersect(rownames(tm.tissue.meta.known), colnames(pancreas.sc)), ]
pancreas.sc <- pancreas.sc[, rownames(meta.subset)]
mca.pancreas.sc <- read.csv("~/Desktop/Morris Lab/Classifier Analysis/Reference datasets/MCA/MCA_Counts/Pancreas/count.csv",
row.names = 1, header = T, stringsAsFactors = F)
mca <- read.csv("~/Desktop/Morris Lab/Classifier Analysis/Reference datasets/MCA/MCA_CellAssignments.csv",
row.names = 1, header = T, stringsAsFactors = F)
mca.meta <- data.frame(row.names = mca$Cell.name,
tissue = mca$Tissue,
cell.type = mca$Annotation,
stringsAsFactors = F)
mca.meta.pancreas <- mca.meta[colnames(mca.pancreas.sc), ]
freq.table.pancrs <- as.data.frame(table(meta.subset$cell.type))
freq.table.pancrs$Var1 <- as.character(freq.table.pancrs$Var1)
freq.table.mca <- as.data.frame(table(mca.meta.pancreas$cell.type))
freq.table.mca$Var1 <- as.character(freq.table.mca$Var1)
cell.num.for.use <- 90
full.ref.cell.samp <- c()
ref.aux.meta <- data.frame()
few.sample.sample <- c()
for (j in 1:nrow(freq.table.mca)) {
curr.cell.type <- freq.table.mca$Var1[j]
cell.bc <- rownames(mca.meta.pancreas)[which(mca.meta.pancreas$cell.type == curr.cell.type)]
if (length(cell.bc) >= cell.num.for.use) {
curr.bc.sample <- sample(cell.bc, cell.num.for.use, replace = F)
curr.bc.sample.mod <- curr.bc.sample
} else {
curr.bc.sample <- sample(cell.bc, cell.num.for.use, replace = T)
curr.bc.sample.mod <- paste0(seq(1,cell.num.for.use), "_", curr.bc.sample)
few.sample.sample <- c(few.sample.sample, as.character(curr.cell.type))
}
full.ref.cell.samp <- c(full.ref.cell.samp, curr.bc.sample)
curr.aux.meta <- data.frame(row.names = curr.bc.sample.mod, cell.type = mca.meta.pancreas[curr.bc.sample, "cell.type"], stringsAsFactors = F)
if (nrow(ref.aux.meta) <= 0) {
ref.aux.meta <- curr.aux.meta
} else {
ref.aux.meta <- rbind(ref.aux.meta, curr.aux.meta)
}
}
remaining.sample <- setdiff(rownames(mca.meta.pancreas), full.ref.cell.samp)
sc.mat.ref <- t(mca.pancreas.sc[, full.ref.cell.samp])
sc.ref.meta <- mca.meta.pancreas[full.ref.cell.samp, ]
for (i in 1:length(few.sample.sample)) {
curr.rnm <- rownames(sc.mat.ref)[which(sc.ref.meta$concat == few.sample.sample[i])]
rownames(sc.mat.ref)[which(sc.ref.meta$concat == few.sample.sample[i])] <- paste0(seq(1, cell.num.for.use), "_", curr.rnm)
}
ref.mat <- ref.construction(t(sc.mat.ref), ref.aux.meta, "cell.type")
sc.mat <- pancreas.sc
curr.tissue <- "pancreas"
file.saving.dir <- "~/Desktop/Morris Lab/Classifier Analysis/Cross Reference Analysis"
single.round.QP.analysis(ref.mat, t(sc.mat.ref), save.to.path = paste0(file.saving.dir, "/"),
save.to.filename = paste0("MCA_", cell.num.for.use, "_cells_for_ref_for_density_ref_", curr.tissue))
single.round.QP.analysis(ref.mat, sc.mat, save.to.path = paste0(file.saving.dir, "/"),
save.to.filename = paste0("MCA_", cell.num.for.use, "_cells_for_ref_for_TM_", curr.tissue))
file.path.name.ref <- paste0(file.saving.dir, "/MCA_", cell.num.for.use, "_cells_for_ref_for_density_ref_", curr.tissue, "_scale.csv")
file.path.name <- paste0(file.saving.dir, "/MCA_", cell.num.for.use, "_cells_for_ref_for_TM_", curr.tissue, "_scale.csv")
col1 <- viridis(20)
my.df <- mca.meta.pancreas
my.df$rn <- rownames(my.df)
background.mtx <- read.csv(file.path.name.ref, header = T, row.names = 1, stringsAsFactors = F)
mtx.test <- read.csv(file.path.name, header = T, row.names = 1, stringsAsFactors = F)
col.sub <- ncol(background.mtx) - 2
perc.list <- percentage.calc(as.matrix(mtx.test[,c(1:col.sub)]), as.matrix(background.mtx[,c(1:col.sub)]))
thresholds <- seq(0.0005, 0.015, by = 0.0005)
classify.rslt <- list()
for (i in 1:length(thresholds)) {
print(i)
bin.count <- binarization(mtx.test[,c(1:col.sub)], perc.ls = perc.list, multi.threshold = thresholds[i])
classify.rslt[[i]] <- bin.count
p <- paste0(file.saving.dir, "/")
fn <- "MCA_TM"
write.csv(bin.count, paste0(p, fn, "_", thresholds[i],"_binary_threshold_", curr.tissue, ".csv"), quote = F, row.names = T)
}
## Evaluate classifier result
classification.ls <- list()
i <- 1
curr.class <- classify.rslt[[i]]
my.df.sub <- meta.subset[rownames(curr.class),]
View(my.df.sub)
View(my.df.sub)
my.df.sort.sub <- my.df.sub[order(my.df.sub$cell.type), ]
my.df.sort.forplot <- data.frame(row.names = rownames(my.df.sort.sub), cell.type = my.df.sort.sub$concat)
View(my.df.sort.sub)
my.df.sort.forplot <- data.frame(row.names = rownames(my.df.sort.sub), cell.type = my.df.sort.sub$cell.type)
curr.class.reorder <- curr.class[rownames(my.df.sort.forplot), ]
colnames(curr.class.reorder) <- unlist(lapply(strsplit(colnames(curr.class.reorder), "_"), function(x) x[length(x)]))
curr.class.singlets <- as.data.frame(curr.class.reorder[which(rowSums(curr.class.reorder) == 1), ])
View(curr.class.reorder)
## Evaluate classifier result
classification.ls <- list()
for (i in 1:length(classify.rslt)) {
curr.class <- classify.rslt[[i]]
my.df.sub <- meta.subset[rownames(curr.class),]
my.df.sort.sub <- my.df.sub[order(my.df.sub$cell.type), ]
my.df.sort.forplot <- data.frame(row.names = rownames(my.df.sort.sub), cell.type = my.df.sort.sub$cell.type)
curr.class.reorder <- curr.class[rownames(my.df.sort.forplot), ]
colnames(curr.class.reorder) <- unlist(lapply(strsplit(colnames(curr.class.reorder), "_"), function(x) x[length(x)]))
curr.class.singlets <- as.data.frame(curr.class.reorder[which(rowSums(curr.class.reorder) == 1), ])
if (nrow(curr.class.singlets) > 1) {
curr.class.mtx <- t(as.matrix(curr.class.singlets))
curr.class.mtx.ref <- t(as.matrix(curr.class.singlets[which(rownames(curr.class.singlets) %in% full.ref.cell.samp),]))
curr.class.mtx.test <- t(as.matrix(curr.class.singlets[-which(rownames(curr.class.singlets) %in% full.ref.cell.samp),]))
p <- paste0(file.saving.dir, "/")
fn <- paste0(thresholds[i], "_classified_plot_threshold_", cell.num.for.use, "_cells_", curr.tissue)
pheatmap(curr.class.mtx.test, color = col1, show_colnames = F, cluster_cols = F, cluster_rows = F, annotation_col = my.df.sort.forplot, cellheight = 20, cellwidth = 500/ncol(curr.class.mtx.test), file = paste0(p, fn, "_test.pdf"))
pheatmap(curr.class.mtx.ref, color = col1, show_colnames = F, cluster_cols = F, cluster_rows = F, annotation_col = my.df.sort.forplot, cellheight = 20, cellwidth = 500/ncol(curr.class.mtx.ref), file = paste0(p, fn, "_ref.pdf"))
}
# curr.class.multi <- as.data.frame(curr.class.reorder[which(rowSums(curr.class.reorder) > 1), ])
# curr.class.mtx.multi <- t(as.matrix(curr.class.multi))
# p <- paste0(file.saving.dir, "/")
# fn <- paste0(thresholds[i], "_classified_plot_threshold_", cell.num.for.use, "_cells_", curr.tissue)
# pheatmap(curr.class.mtx.multi, color = col1, show_colnames = F, cluster_cols = F, cluster_rows = F, annotation_col = my.df.sort.forplot, cellheight = 20, cellwidth = 500/ncol(curr.class.mtx.test), file = paste0(p, fn, "_multi.pdf"))
curr.classification <- binary.to.classification(curr.class)
classification.ls[[i]] <- curr.classification
}
View(curr.class)
View(curr.class)
View(curr.class)
curr.class.reorder <- curr.class[rownames(my.df.sort.forplot), ]
colnames(curr.class.reorder) <- unlist(lapply(strsplit(colnames(curr.class.reorder), "_"), function(x) x[length(x)]))
curr.class.singlets <- as.data.frame(curr.class.reorder[which(rowSums(curr.class.reorder) == 1), ])
View(curr.class.singlets)
if (nrow(curr.class.singlets) > 1) {
curr.class.mtx <- t(as.matrix(curr.class.singlets))
curr.class.mtx.ref <- t(as.matrix(curr.class.singlets[which(rownames(curr.class.singlets) %in% full.ref.cell.samp),]))
curr.class.mtx.test <- t(as.matrix(curr.class.singlets[-which(rownames(curr.class.singlets) %in% full.ref.cell.samp),]))
p <- paste0(file.saving.dir, "/")
fn <- paste0(thresholds[i], "_classified_plot_threshold_", cell.num.for.use, "_cells_", curr.tissue)
pheatmap(curr.class.mtx.test, color = col1, show_colnames = F, cluster_cols = F, cluster_rows = F, annotation_col = my.df.sort.forplot, cellheight = 20, cellwidth = 500/ncol(curr.class.mtx.test), file = paste0(p, fn, "_test.pdf"))
pheatmap(curr.class.mtx.ref, color = col1, show_colnames = F, cluster_cols = F, cluster_rows = F, annotation_col = my.df.sort.forplot, cellheight = 20, cellwidth = 500/ncol(curr.class.mtx.ref), file = paste0(p, fn, "_ref.pdf"))
}
?slot
library(data.table)
?dcast
?substr
library(roxygen2)
library(devtools)
setwd("~/Desktop/Morris Lab/CloneHunterNew/")
devtools::document()
test.obj <- CellTagObject("test_object", fastq.bam.input = "~/Desktop/Analysis/CellTaggeR test/V2-1_S2_L001_R1_001.fastq", celltag.version = "v2")
test.obj <- CellTagExtraction(test.obj)
test.obj <- AddCellTagFreqSort(test.obj)
test.obj <- CellTagWhitelistFiltering(test.obj, 0.9)
